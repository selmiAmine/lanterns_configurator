/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from 'react'
import { MeshRefractionMaterial, useGLTF } from '@react-three/drei'
import gsap from 'gsap'
import { useFrame, useLoader, useThree } from '@react-three/fiber'
import { useControls } from 'leva'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import { Bloom } from '@react-three/postprocessing'
import { BlurPass, Resizer, KernelSize, Resolution } from 'postprocessing'
import { RGBELoader } from 'three/examples/jsm/Addons.js'

export function Ring(props) {
  const { nodes, materials } = useGLTF('/models/ring.glb')
  const t1 = gsap.timeline()
  const texture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')
  const config = useControls({
    bounces: { value: 3, min: 0, max: 8, step: 1 },
    aberrationStrength: { value: 0.01, min: 0, max: 0.1, step: 0.01 },
    ior: { value: 2.75, min: 0, max: 10 },
    fresnel: { value: 1, min: 0, max: 1 },
    color: 'white',
  })

  const { camera, scene } = useThree()
  // const { cameraPosition, scenePosition, sceneRotation } = useControls({
  //   cameraPosition: {
  //       value: { x:4.45, y:0.45, z:9 },
  //       step: 0.05
  //   },
  //   scenePosition : {
  //       value : { x:0.25, y:0, z:4.35 },
  //       step: 0.05
  //   },
  //   sceneRotation : {
  //       value : { x:0, y:0, z:0 },
  //       step: 0.01
  //   },

  // })  

  useFrame(() => {
    // camera.position.x = cameraPosition.x
    // camera.position.y = cameraPosition.y
    // camera.position.z = cameraPosition.z

    // scene.position.x = scenePosition.x
    // scene.position.y = scenePosition.y
    // scene.position.z = scenePosition.z

    // scene.rotation.x = sceneRotation.x
    // scene.rotation.y = sceneRotation.y
    // scene.rotation.z = sceneRotation.z
  })


  camera.position.x = 4.45
  camera.position.y = 0.45
  camera.position.z = 9

  scene.position.x = 0.25
  scene.position.y = .2
  scene.position.z = 4.35

  useLayoutEffect(() => {
    new ScrollTrigger({})

    t1.from(camera.position, {
      z: 2,
      ease: 'power4',
      ease: "power4.inOut",
      duration: 4

    })

      .from('.navbar', {
        delay: 1,
        opacity: 0,
        translateY: '30px',
        ease: 'power4',
        duration: 6
      }, '<')

      .from('.rightSideContent', {
        delay: 1,
        opacity: 0,
        translateX: '200px',
        ease: 'power4.inOut',
        duration: 3
      }, '<')
      
      t1.to('.rightSideContent', {
        translateX: '200px',
        opacity:0,
        duration: 2,
        scrollTrigger: {
          trigger: ".second-section",
          ease: "power4.inOut",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      t1.from('.buttonWrapperContent', {
        translateX: '-50px',
        translateY: '400px',
        opacity:0,
        scrollTrigger: {
          trigger: ".third-section",
          ease: "power4.inOut",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      t1.from('.rightSideContentAboutUs', {
        translateX: '-200px',
        opacity:0,
        scrollTrigger: {
          trigger: ".second-section",
          ease: "power4.inOut",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      t1.to('.rightSideContentAboutUs', {
        translateX: '-200px',
        opacity:0,
        scrollTrigger: {
          trigger: ".third-section",
          ease: "power4.inOut",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      t1.from('.rightSideContentCustomizer', {
        translateX: '200px',
        opacity:0,
        scrollTrigger: {
          trigger: ".third-section",
          ease: "power4.inOut",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

    t1.to(camera.position, {
      x: -1.95,

      scrollTrigger: {
        trigger: ".second-section",
        ease: "power4.inOut",
        start: "top bottom",
        end: "top top",
        scrub: true,
        immediateRender: false,
        markers: true
      }
    })

      .to(scene.rotation, {
        x: 0.25, y: -0.5, z: -1.35,
        scrollTrigger: {
          trigger: ".second-section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      .to(scene.rotation, {
        x: 5.50, y: .95, z: .50,
        scrollTrigger: {
          trigger: ".third-section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      .to(camera.position, {
        x: -1.95, y: 0.45, z: 9,
        scrollTrigger: {
          trigger: ".third-section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      .to(scene.position, {
        x: -2, y: .5, z: 4.35,
        scrollTrigger: {
          trigger: ".third-section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

      .to(scene.scale, {
        x: .8, y: .8, z: .8,
        scrollTrigger: {
          trigger: ".third-section",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers: true
        }
      })

  }, [])


  return (
    
    <group {...props} dispose={null}>

      <group position={[0, -0.043, -0.093]}>
        <group rotation={[0, 0, 0.9]} scale={1.063}>
        {/* <Bloom mipmapBlur luminanceThreshold={1} /> */}

          <mesh
          // meshStandardMaterial emissive="red" emissiveIntensity={2} toneMapped={false} 
            castShadow
            receiveShadow
            geometry={nodes.diamonds002.geometry}
            // material={nodes.diamonds002.material}
          >
                        <MeshRefractionMaterial envMap={texture} {...config} toneMapped={false} />

            </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.diamonds001.geometry}
            // // material={nodes.diamonds001.material}
          >
                        <MeshRefractionMaterial envMap={texture} {...config} toneMapped={false} />

            </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.diamonds003.geometry}
            // // material={nodes.diamonds003.material}
          >
                        <MeshRefractionMaterial envMap={texture} {...config} toneMapped={false} />

            </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.diamonds005.geometry}
            // // material={nodes.diamonds005.material}
          >
                        <MeshRefractionMaterial envMap={texture} {...config} toneMapped={false} />

            </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.diamonds.geometry}
            // // material={nodes.diamonds.material}
          >
                        <MeshRefractionMaterial envMap={texture} {...config} toneMapped={false} />

            </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.diamonds004.geometry}
            // // material={nodes.diamonds004.material}
          >
            <MeshRefractionMaterial envMap={texture} {...config} toneMapped={false} />
            </mesh>
          <mesh castShadow receiveShadow geometry={nodes.gold.geometry} 
          material={materials.gold}
           />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.silver.geometry}
            material={materials.silver}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/ring.glb')