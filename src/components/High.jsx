/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useEffect, useRef } from 'react'
import { useLayoutEffect, useState } from 'react'
import { Decal, MeshRefractionMaterial, useGLTF, useMatcapTexture, useTexture } from '@react-three/drei'
import gsap from 'gsap'
import { useFrame, useLoader, useThree } from '@react-three/fiber'
import { useControls } from 'leva'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import { Bloom } from '@react-three/postprocessing'
import { BlurPass, Resizer, KernelSize, Resolution } from 'postprocessing'
import { RGBELoader } from 'three/examples/jsm/Addons.js'
import { Color } from 'three'
import * as THREE from 'three';
import { useSnapshot } from 'valtio'

// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'

export function High(props) {


  const snap = useSnapshot(props.colors);


  const t1 = gsap.timeline()
  const texture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')

  // const [diamondColor, setDiamondColor] = useState(new THREE.Color(0x39cffe).convertSRGBToLinear())
 
 
  const hexString = snap.Material_6; // Or dynamically from snap.Material_6

  // Convert the hex string to a numerical 0x format
  const hexValue = `0x${hexString.slice(1)}`; // This will be "0x64f569"
  
  // Create the THREE.Color object with the parsed hex value
  const [diamondColor, setDiamondColor] = useState(new THREE.Color(parseInt(hexValue, 16)).convertSRGBToLinear());
    
  // Update state when the hex string changes
useEffect(() => {
    const newColor = new THREE.Color(parseInt(hexString.replace("#", ""), 16)).convertSRGBToLinear();
    setDiamondColor(newColor);
  
}, [hexString]);

// Use effect to force update when the color changes
useEffect(() => {
  if (materials.Material_6) {
    materials.Material_6.needsUpdate = true; // Force material to update
  }
}, [diamondColor]);

  const [diamondLerpValue, setDiamondLerpValue] = useState({ x: 0 })

  const [hovered, setHovered] = useState(null);

  useEffect(() => {
    const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="#ffffff"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
    if (hovered) {
      document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
        cursor
      )}'), auto`;
    }
    return () => (document.body.style.cursor = "auto");
  }, [hovered]);

  // setDiamondColor(new Color(0x39cffe).convertSRGBToLinear())

  const config = {
    bounces: 4,
    aberrationStrength: 0.03,
    ior: 2.5,
    fresnel: .8,
  }

  const diamondObjects = [
    'diamonds',
    'diamonds001',
    'diamonds002',
    'diamonds003',
    'diamonds004',
    'diamonds005',
  ]

  let colorLerpValue = { x: 0 }
  const { nodes, materials } = useGLTF('/models/Upgraded.glb')

  const [matcap] = useMatcapTexture('3E3D39_D6CEAF_91BAC1_897966')

  return (



    <group {...props} dispose={null}
      onPointerOver={(e) => {
        // console.log(e.object.material.name)
        console.log(snap)
        console.log(hexValue + '  ' + hexString + '  '+ snap.Material_6)

        e.stopPropagation();
        setHovered(e.object.material.name);
      }}
      onPointerOut={(e) => {
        if (e.intersections.length === 0) {
          setHovered(null);
        }
      }}
      onPointerDown={(e) => {
        e.stopPropagation();
        props.updateCurrent(e.object.material.name);
      }}
      onPointerMissed={() => {
        props.updateCurrent(null);
      }}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.R7.geometry}
        material={materials.silver}
        material-color={snap.silver}

        position={[0.126, -34.883, 23.45]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={10000}
      >

        {/* <meshMatcapMaterial  matcap={matcap} name='Matcap material' /> */}

      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.R6.geometry}
        material={materials.gold}
        material-color={snap.gold}
        position={[0.138, 31.181, 23.554]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={10000}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.R3.geometry}
        material={materials.Material_6}
        position={[-0.067, 35.83, 22.982]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={10000}
      >

        <MeshRefractionMaterial name='Material_6' envMap={texture} {...config} color={diamondColor} toneMapped={true} />

      </mesh>

      
    </group>
  )
}

useGLTF.preload('/models/Upgraded.glb')