/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { MeshRefractionMaterial, useGLTF } from '@react-three/drei'
import { useLoader } from '@react-three/fiber'
import { RGBELoader } from 'three/examples/jsm/Addons.js'
import { Color } from 'three'
import * as THREE from 'three';

export function Convert(props) {
  const { nodes, materials } = useGLTF('/models/convert.glb')
  const texture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')

  // const [diamondColor, setDiamondColor] = useState(new THREE.Color(0x39cffe).convertSRGBToLinear())
  const [diamondColor, setDiamondColor] = useState(new THREE.Color(0x39cffe).convertSRGBToLinear())
  const [diamondLerpValue, setDiamondLerpValue] = useState({ x: 0 })



  // setDiamondColor(new Color(0x39cffe).convertSRGBToLinear())

  const config = {
    bounces: 4,
    aberrationStrength: 0.03,
    ior: 2.5,
    fresnel: .8,
  }

  
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.R8.geometry}
        material={materials.R80}
        position={[0.809, 1.159, -10.088]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={122.815}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.R7.geometry}
        material={materials.R70}
        position={[0.809, 1.159, -10.088]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={122.815}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.R6.geometry}
        material={materials.R60}
        position={[0.809, 1.159, -10.088]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={122.815}
      >
                    <MeshRefractionMaterial envMap={texture} {...config} color={diamondColor} toneMapped={false} />

      </mesh>
    </group>
  )
}

useGLTF.preload('/models/convert.glb')
