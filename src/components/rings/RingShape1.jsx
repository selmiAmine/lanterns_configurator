/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useCustomization } from '../../contexts/Customization';
import { useSnapshot } from 'valtio';

export function RingShape1(props) {
    const { nodes, materials } = useGLTF('/models/rings/Ring1-variations.glb')


    const snap = useSnapshot(props.colors);


    const [hovered, setHovered] = useState(null);
    const hexString = snap.Material_6; // Or dynamically from snap.Material_6


    useEffect(() => {
        const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="#ffffff"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
        if (hovered) {
            document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
                cursor
            )}'), auto`;
        }
        return () => (document.body.style.cursor = "auto");
    }, [hovered]);

    const {
        ringColor,
        diamondColor,
        headerColor,
        selectedDiamond,
        selectedHeader
    } = useCustomization();

    return (
        <group {...props} dispose={null}
            onPointerOver={(e) => {
                console.log(e.object.material.name)
                console.log(snap)
                // console.log(hexValue + '  ' + hexString + '  '+ snap.Material_6)

                e.stopPropagation();
                setHovered(e.object.material.name);
            }}
            onPointerOut={(e) => {
                if (e.intersections.length === 0) {
                    setHovered(null);
                }
            }}
            onPointerDown={(e) => {
                e.stopPropagation();
                props.updateCurrent(e.object.material.name);
            }}
            onPointerMissed={() => {
                props.updateCurrent(null);
            }}

        >

            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Circle.geometry}
                material={materials['R70.003']}
                position={[0, 0.555, 0.001]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={50}
                material-color={ringColor.color}

            />

            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Header_2.geometry}
                material={materials['R60.003']}
                position={[0, 0.886, 0.002]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={50}
                material-color={headerColor.color}
                visible={selectedHeader == 'Heading 2'}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Diamond_1.geometry}
                material={materials['R30.002']}
                position={[-0.001, 0.909, -0.001]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={50}
                material-color={diamondColor.color}
                visible={selectedDiamond == 'Diamond 1'}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Diamond_2.geometry}
                material={materials['R30.003']}
                position={[0.001, 0.918, 0]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={50}
                material-color={diamondColor.color}
                visible={selectedDiamond == 'Diamond 2'}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Header_1.geometry}
                material={materials['R60.004']}
                position={[-0.001, 0.88, 0.001]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={50}
                material-color={headerColor.color}
                visible={selectedHeader == 'Heading 1'}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Header_3.geometry}
                material={materials['R70.005']}
                position={[-0.001, 0.883, 0.001]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={50}
                material-color={headerColor.color}
                visible={selectedHeader == 'Heading 3'}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Diamond_3.geometry}
                material={materials['R60.005']}
                position={[0.001, 0.91, 0]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={50}
                material-color={diamondColor.color}
                visible={selectedDiamond == 'Diamond 3'}
            />

        </group>
    )
}

useGLTF.preload('/models/rings/Ring1-variations.glb')